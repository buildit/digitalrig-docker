Master:
  Image: "builditdigital/jenkins-master"
  ImageTag: "latest"
  UseSecurity: false
  ServiceType: ClusterIP
  HostName: "jenkins.kube.local"
  InitScripts:
  - |
    // set global parameters (please review HOST PATH!)
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    def hostProjPath = '/Users/romansafronov/dev/projects'

    def params = [CLOUD: 'local', REGION: '', REGISTRY: 'builditdigital', HOST_PROJECT_PATH: hostProjPath, INT_DOMAIN: 'kube.local']
    def nodeProps = jenkins.model.Jenkins.getInstance().getGlobalNodeProperties()
    def envVars = nodeProps.get(hudson.slaves.EnvironmentVariablesNodeProperty)
    if (envVars == null) {
      envVars = new hudson.slaves.EnvironmentVariablesNodeProperty()
      nodeProps.add(envVars)
    }
    envVars.envVars << params
  - |
    // register pipeline library
    import jenkins.plugins.git.GitSCMSource
    import org.jenkinsci.plugins.workflow.libs.GlobalLibraries
    import org.jenkinsci.plugins.workflow.libs.LibraryConfiguration
    import org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever

    def buildit = new LibraryConfiguration("buildit",
                              new SCMSourceRetriever(
                                      new GitSCMSource(
                                              "git", "https://github.com/buildit/jenkins-pipeline-libraries.git",
                                              null, "*", null, true)))
    buildit.defaultVersion = 'master'
    GlobalLibraries.get().setLibraries([buildit])
  - |
    // create seed job
    import javaposse.jobdsl.dsl.DslScriptLoader
    import javaposse.jobdsl.plugin.JenkinsJobManagement

    def seedJob = '''
    job('_create project') {
      	parameters {
            stringParam('proj', '', 'proj name')
            stringParam('gitUrl', '/var/projects/', 'proj name')
            stringParam('branchToBuild', 'master', 'branch(es) to build')
            stringParam('stagingPipeline', 'k8s/pipelines/staging.groovy', 'staging pipeline defition path')
            stringParam('prodPipeline', 'k8s/pipelines/prod.groovy', 'prod pipeline defition path')
        }
        steps {
            dsl {
              text("if(stagingPipeline) pipelineJob(proj+'-staging') {triggers {scm('H/5 * * * *')}; definition {cpsScm {scm {git {branch(branchToBuild);remote {url(gitUrl)}}}; scriptPath(stagingPipeline)}}}; ")
            }
            dsl {
              text("if(prodPipeline) pipelineJob(proj+'-prod') { definition { cpsScm { scm {git {branch(branchToBuild);remote {url(gitUrl)}}}; scriptPath(prodPipeline)}}}; ")
            }
        }
    }
    '''
    def workspace = new File('.')
    def jobManagement = new JenkinsJobManagement(System.out, [:], workspace)
    new DslScriptLoader(jobManagement).runScript(seedJob)
Persistence:
  Enabled: true
  StorageClass:
  AccessMode: ReadWriteOnce
  Size: 4Gi
  volumes:
  - name: projects
    hostPath:
      path: /Users/romansafronov/dev/projects
  mounts:
  - mountPath: /var/projects
    name: projects
    readOnly: true

Agent:
  Image: jenkinsci/jnlp-slave
  ImageTag: alpine

